<?php

namespace AppBundle\Entity;

use AppBundle\Services\Messenger\Config;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the DQL ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    private $currentUser;
    private $data;
    private $admin = false;
    private $export = false;


    public function setSplashShowBingo($likeMeId, $userId)
    {
        $em = $this->getEntityManager();
        $bingo = $em->getRepository('AppBundle:LikeMe')->find($likeMeId);
        if($bingo) {
            if ($bingo->getUserFrom()->getId() == $userId) {
                $bingo->setIsShowSplashFrom(1);
            } else {
                $bingo->setIsShowSplashTo(1);
            }
            $em->persist($bingo);
            $em->flush();
        }
        return true;
    }
    
    public function removeWordsBlocked($post, $fields = array('username','occupation','about','looking')){
    	if(count($fields) > 0) {

    		$em = $this->getEntityManager();
    		$wordsBlocked = $em->getRepository('AppBundle:WordBlocked')->findAll();
           // var_dump($wordsBlocked);
    		foreach ($wordsBlocked as $wordBlocked) {
    			foreach ($fields as $field) {
    				if(isset($post[$field])) {
    					$post[$field] = str_replace($wordBlocked->getValue(), '', $post[$field]);
    				}
    			}
    		}
    	}
    	return $post;
    }

    public function loadUserByUsername($username)
    {
    	$username = urldecode((string)$username);
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();

        if (null === $user) {
            $message = sprintf(
                'Unable to find an active user AppBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message);
        }

        return $user;
    }
    
    public function sendUserLike($fromUser, $toUser){
    	$status = $this->getlikeStatus($fromUser, $toUser);
    	$em = $this->getEntityManager();
    	switch ($status){
    		case 'none':
    			//send
    			//add Like
    			$likeMe = new LikeMe();
    			$likeMe->setUserFrom($fromUser)->setUserTo($toUser);
    			$em->persist($likeMe);
    			$em->flush();
    			//send notification
    			$userNotification = new UserNotifications();
    			$date = new \DateTime();
    			$notification = $em->getRepository('AppBundle:Notifications')->find(1);
    			$userNotification->setLikeMe($likeMe)->setUser($toUser)->setDate($date)->setNotification($notification);
    			$em->persist($userNotification);
    			$em->flush();
    			$res = 'like';
    			break;
    		case 'send_me':
    			//bingo
    			$likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $toUser->getId(), 'userTo' => $fromUser->getId()));
    			$likeMe->setIsBingo(true);
    			$em->persist($likeMe);
    			$em->flush();
    			$fromUser->getNotifications();
    			$em->persist($fromUser);
    			$em->flush();
    
    			$userNotification = new UserNotifications();
    			$date = new \DateTime();
    			$notification = $em->getRepository('AppBundle:Notifications')->find(2);
    			$userNotification->setLikeMe($likeMe)->setUser($toUser)->setDate($date)->setNotification($notification);
    			$em->persist($userNotification);
    			$em->flush();
    
    			$userNotification = new UserNotifications();
    			$userNotification->setLikeMe($likeMe)->setUser($fromUser)->setDate($date)->setNotification($notification);
    			$em->persist($userNotification);
    			$em->flush();
    
    
    			$settings = $em->getRepository('AppBundle:Settings')->find(1);
    			$subject = "בינגו! התראה מהזירה של גרינדייט";
    			
    			$text = '<html lang="he">
						<head>
							<meta http-equiv="content-type" content="text/html; charset=utf-8">
						</head>
						<body>
    					<div dir="rtl">
                    <img style="float:left; width:100px;" src="' . $fromUser->getMainPhoto()->getFaceWebPath() . '" />
    				גם '.$fromUser->getUsername().' בעניין שלך!
    						
                    <br>יש לך בינגו בזירה! לחצ/י <a href="https://www.greendate.co.il" target="_blank">כאן</a> ליצירת קשר עם '.$fromUser->getUsername().'<br>
או פתח/י את האפליקציה של גרינדייט במכשיר הנייד ותמתין לך הפתעה.
					<br>בהצלחה!
					
					<br>צוות גרינדייט
					<br>www.greendate.co.il</div>
                    	</body></html>';
    			
    
    			$headers = "MIME-Version: 1.0" . "\r\n";
    			$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
    			$headers .= 'From: ' . $settings->getContactEmail() . ' <' . $settings->getContactEmail() . '>' . "\r\n";
    
    			$subject1 = 'בינגו! התראה מהזירה של גרינדייט';
    	
    
    			$text1 = '<html lang="he">
						<head>
							<meta http-equiv="content-type" content="text/html; charset=utf-8">
						</head>
						<body>
    					<div dir="rtl">
                    <img style="float:left; width:100px;" src="' . $toUser->getMainPhoto()->getFaceWebPath() . '" />
    				גם ' . $toUser->getUsername() . ' בעניין שלך!
    			
                    <br>יש לך בינגו בזירה! לחצ/י <a href="https://www.greendate.co.il" target="_blank">כאן</a> ליצירת קשר עם ' . $toUser->getUsername() . '<br>
או פתח/י את האפליקציה של גרינדייט במכשיר הנייד ותמתין לך הפתעה.
					<br>בהצלחה!
			
					<br>צוות גרינדייט
					<br>www.greendate.co.il</div>
                    	</body></html>';
    			
    			mail($toUser->getEmail(),$subject,$text,$headers);
    			mail($fromUser->getEmail(),$subject1,$text1,$headers);
    			$res = 'bingo';
    			break;
    		default:
    			$res = 'sended';
    
    	}
    
    	return $status;
    }
    
    public function getlikeStatus($fromUser, $toUser, $bingoSplashStatus = false)
    {
    	$fromUserId = $fromUser->getId();
    	$toUserId = $toUser->getId();
    
    	$em = $this->getEntityManager();
    	//$conn = $em->getConnection();
    
    	/* $sql = "SELECT * FROM likeMe WHERE (from_id = ? and to_id = ?) or (from_id = ? and to_id = ?)";
    	 $stmt = $conn->prepare($sql);
    	 $stmt->bindParam(1, $fromUserId, \PDO::PARAM_INT);
    	 $stmt->bindParam(2, $toUserId, \PDO::PARAM_INT);
    	 $stmt->bindParam(3, $toUserId, \PDO::PARAM_INT);
    	 $stmt->bindParam(4, $fromUserId, \PDO::PARAM_INT);
    	 */
    	//$sql_str = $stmt;
    	$likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $fromUserId, 'userTo' => $toUserId));
    	if(empty($likeMe)){
    		$likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $toUserId, 'userTo' => $fromUserId));
    	}
    	//$userLikeMe = $stmt->fetchAll();
    
    
    	if(is_object($likeMe)){
    		//$like = $userLikeMe[0];
    		if($likeMe->getUserFrom()->getId() == $fromUserId and !$likeMe->getIsBingo() ){
    			// I sended like.
    			$result = 'i_send';
    		}elseif(!$likeMe->getIsBingo() and $likeMe->getUserTo()->getId() == $fromUserId){
    			// user sended me like
    			$result = 'send_me';
    		}elseif($likeMe->getIsBingo()){
    			// has been bingo
    			if(!$bingoSplashStatus) {
    				$result = 'bingo';
    			}else {
    				if (($likeMe->getUserFrom()->getId() == $fromUserId and !$likeMe->getIsShowSplashFrom()) or ($likeMe->getUserTo()->getId() == $fromUserId and !$likeMe->getIsShowSplashTo())) {
    					$result = 'splash_not_show';
    				}else{
    					$result = 'splash_show_yet';
    				}
    			}
    		}
    	}else{
    		$result = 'none';
    	}
    
    	return $result;
    }

    public function loadUserByUsernameApi($username)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            //->andWhere('u.isActive = :isActive')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            //->setParameter('isActive', true)
            ->getQuery()
            ->getOneOrNullResult();

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }

    public function getOnline($settings)
    {
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['data'];
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($settings['considered_as_online_minutes_number'] . ' minutes ago'));

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.lastActivityAt > :delay')
            ->setParameter('delay', $delay)
        ;

        $this->setSearchFilter($qb, $settings['per_page']);

        if($settings['data']['filter'] == 'popularity'){
            $users = $qb->getQuery()->getResult();
            shuffle($users);
            return $users;
        }

        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
    }

    public function getNew($settings)
    {
        $this->currentUser = $settings['current_user'];

        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($settings['considered_as_new_days_number'] . ' days ago'));

        $qb = $this->createQueryBuilder('u')
            ->where('u.signUpDate > :delay')
            ->andWhere('u.isActive = 1')
            ->andwhere('u.isNonLocked = 1')
            ->andwhere('u.isFrozen = 0')
            ->setParameter('delay', $delay)
            ->orderBy('u.id', 'DESC')
            ->setMaxResults($settings['per_page'])
        ;

        if($this->currentUser instanceof User && !$this->currentUser->isAdmin()){
            //$qb->andWhere('u.gender <> :gender')->setParameter('gender', $this->currentUser->getGender());
            //1-strate;2-gey;3-lesbit;4-dumini;5-amini;6-aher;
            if($this->currentUser->getSexOrientation()->getId() == 1) {
                $qb->andWhere('u.gender <> :gender')->setParameter('gender', $this->currentUser->getGender());
                $qb->andWhere(
                    $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                )->setParameter('sexOrientation', array(2,3));
            }elseif ($this->currentUser->getSexOrientation()->getId() == 2){
                $qb->andWhere('u.gender = :gender')->setParameter('gender', 1);
                $qb->andWhere(
                    $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                )->setParameter('sexOrientation', array(1));
            }elseif ($this->currentUser->getSexOrientation()->getId() == 3){
                $qb->andWhere('u.gender = :gender')->setParameter('gender', 2);
                $qb->andWhere(
                    $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                )->setParameter('sexOrientation', array(1));
            }else{
                $qb->andWhere('u.sexOrientation <> 1 OR (u.sexOrientation = 1 AND u.gender <> :gender)')->setParameter('gender', $this->currentUser->getGender());
            }
        }

        return $qb->getQuery()->getResult();
    }

    public function search($settings)
    {

        $this->currentUser = $settings['current_user'];
        $this->data = $settings['data'];
        $is_search_orientation = false;
        if(!isset($settings['per_page'])){
            $settings['per_page'] = null;
        }

        $qb = $this->createQueryBuilder('u');

        if(!empty($this->data['id'])){
            $qb->where('u.id = :id')->setParameter('id', $this->data['id']);
        }
        elseif(!empty($this->data['email'])){
            $qb->where(
                $qb->expr()->like('u.email', ":email")
            )->setParameter('email', '%' . $this->data['email'] . '%');
        }
        elseif(!empty($this->data['username'])){
            $qb->where(
                $qb->expr()->like('u.username', ":username")
            )->setParameter('username', '%' . $this->data['username'] . '%');
        }
        else{
/*
            $qb->where('u.id <> :userId')
                ->setParameter('userId', $this->data['userId'])
            ;
*/
            if(!empty($this->data['region'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.region', ":region")
                )->setParameter('region', $this->data['region']);
            }

            if(!empty($this->data['type'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.type', ":type")
                )->setParameter('type', $this->data['type']);
            }

            if(!empty($this->data['ageFrom']) && !empty($this->data['ageTo'])){
                $this->data['date_1'] = date("Y") - $this->data['ageFrom'] . '-' . date("m") . '-' . date("d");
                $this->data['date_2'] = date("Y") - $this->data['ageTo'] . '-01-01';
                //$this->data['date_2'] = (int)date("Y") - (int)($this->data['ageTo'] + 1) . '-01-01';

                //echo $this->data['date_1'] . ' - ' . $this->data['date_2'];


                $qb->andWhere('u.birthday <= :date_1')
                    ->andWhere('u.birthday >= :date_2')
                    ->setParameter('date_1', $this->data['date_1'])
                    ->setParameter('date_2', $this->data['date_2'])
                ;
            }

            if(!empty($this->data['heightFrom']) && !empty($this->data['heightTo'])){
                $qb->andWhere('u.height >= :heightFrom')
                    ->andWhere('u.height <= :heightTo')
                    ->setParameter('heightFrom', $this->data['heightFrom'])
                    ->setParameter('heightTo', $this->data['heightTo'])
                ;
            }

            if(!empty($this->data['body'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.body', ":body")
                )->setParameter('body', $this->data['body']);
            }

            if(!empty($this->data['relationshipStatus'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.relationshipStatus', ":relationshipStatus")
                )->setParameter('relationshipStatus', $this->data['relationshipStatus']);
            }

            if(!empty($this->data['occupation'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.occupation', ":occupation")
                )->setParameter('occupation', $this->data['occupation']);
            }

            if(!empty($this->data['education'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.education', ":education")
                )->setParameter('education', $this->data['education']);
            }

            if(!empty($this->data['religion'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.religion', ":religion")
                )->setParameter('religion', $this->data['religion']);
            }

            if(!empty($this->data['religionAffinity'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.religionAffinity', ":religionAffinity")
                )->setParameter('religionAffinity', $this->data['religionAffinity']);
            }

            if(!empty($this->data['sexOrientation'][0])){
                $is_search_orientation = true;
                $qb->andWhere(
                    $qb->expr()->in('u.sexOrientation', ":sexOrientation")
                )->setParameter('sexOrientation', $this->data['sexOrientation']);
            }

            if(!empty($this->data['purposes'][0])){
                $qb->join('u.purposes', 'p', 'WITH',
                    $qb->expr()->in('p.id', ':purposes')
                )->setParameter('purposes', $this->data['purposes']);
            }

            if(!empty($this->data['veggieReasons'][0])){
                $qb->join('u.veggieReasons', 'vr', 'WITH',
                    $qb->expr()->in('vr.id', ':veggieReasons')
                )->setParameter('veggieReasons', $this->data['veggieReasons']);
            }

            if(!empty($this->data['interests'][0])){
                $qb->join('u.interests', 'i', 'WITH',
                    $qb->expr()->in('i.id', ':interests')
                )->setParameter('interests', $this->data['interests']);
            }

            if(!empty($this->data['smoking'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.smoking', ":smoking")
                )->setParameter('smoking', $this->data['smoking']);
            }
            
            if(!empty($this->data['gender'][0])){
            	$qb->andWhere(
            			$qb->expr()->in('u.gender', ":gender")
            			)->setParameter('gender', $this->data['gender']);
            }

            if(!empty($this->data['drinking'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.drinking', ":drinking")
                )->setParameter('drinking', $this->data['drinking']);
            }

            if(!empty($this->data['children'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.children', ":children")
                )->setParameter('children', $this->data['children']);
            }

            if(!empty($this->data['withPhoto'])){
                /*
                $qb->join('u.photos', 'p', 'WITH',
                    $qb->expr()->andX(
                        $qb->expr()->eq('p.isMain', true),
                        $qb->expr()->eq('p.isValid', true)
                    )
                );
                */
                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                );
            }

            /*
            if(!empty($this->data['gender']) && !empty($this->data['lookingGender'])){
                $qb->andWhere('u.gender = :gender')
                    ->andWhere('u.lookingGender = :lookingGender')
                    ->setParameter('gender', $this->data['lookingGender'])
                    ->setParameter('lookingGender', $this->data['gender'])
                ;
            }
            */

            // TEST GENDER
            /*if( !empty($this->data['gender'] and !is_array($this->data['gender'])) ){
                $qb->andWhere('u.gender = :gender')
                    ->setParameter('gender', $this->data['gender'])
                ;
            }*/


            if($this->admin){
            	
            	if(!empty($this->data['gender'][0])){
            		$qb->andWhere(
            				$qb->expr()->in('u.gender', ":gender")
            				)->setParameter('gender', $this->data['gender']);
            	}

                if(!empty($this->data['zodiac'])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.zodiac', ":zodiac")
                    )->setParameter('zodiac', $this->data['zodiac']);
                }

                if(!empty($this->data['loginFrom'])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.loginFrom', ":loginFrom")
                    )->setParameter('loginFrom', $this->data['loginFrom']);
                }

                if(!empty($this->data['isActive'])){
                    $isActive = $this->data['isActive'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isActive = ' . $isActive);
                }

                if(!empty($this->data['isFrozen'])){
                    $isFrozen = $this->data['isFrozen'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isFrozen = ' . $isFrozen);
                }

                if(!empty($this->data['isPhone'])){
                    $not = $this->data['isPhone'] == 1 ? 'NOT ' : '';
                    $qb->andWhere("u.phone IS " . $not . "NULL");
                }

                if(!empty($this->data['hasPoints'])){
                    if($this->data['hasPoints'] == 1){
                        $qb->andWhere("u.points > 0");
                    }
                    else{
                        $qb->andWhere("u.points = 0");
                    }
                }

                if(!empty($this->data['isPaying'])){

                    $date = date("Y-m-d");

                    if($this->data['isPaying'] == 1){
                        $qb->andWhere("u.startSubscription <= '" . $date ."'")
                            ->andWhere("u.endSubscription >= '" . $date . "'")
                        ;
                    }
                    else{
                        $qb->andWhere(
                            "u.startSubscription IS NULL OR u.endSubscription IS NULL OR u.endSubscription < '" . $date . "'"
                        );
                    }
                }

                if(!empty($this->data['isPhoto'])){
                    if($this->data['isPhoto'] == 1){
                        $qb->join('u.photos', 'ph', 'WITH',
                            $qb->expr()->eq('ph.isValid', true)
                        );
                    }
                    else{
                        $qb->andWhere(
                            $qb->expr()->not(
                                $qb->expr()->exists("SELECT p.id FROM AppBundle:Photo p WHERE  p.user = u.id AND p.isValid = 1")
                            )
                        );
                    }
                }

                if(!empty($this->data['startSubscriptionFrom']) && !empty($this->data['startSubscriptionTo'])){
                    $this->setFromToDateConditions(
                        $this->data['startSubscriptionFrom'],
                        $this->data['startSubscriptionTo'],
                        'startSubscription',
                        $qb
                    );
                }

                if(!empty($this->data['endSubscriptionFrom']) && !empty($this->data['endSubscriptionTo'])){
                    $this->setFromToDateConditions(
                        $this->data['endSubscriptionFrom'],
                        $this->data['endSubscriptionTo'],
                        'endSubscription',
                        $qb
                    );
                }

                if(!empty($this->data['signUpFrom']) && !empty($this->data['signUpTo'])){
                    $this->setFromToDateConditions(
                        $this->data['signUpFrom'],
                        $this->data['signUpTo'],
                        'signUpDate',
                        $qb
                    );
                }

                if(!empty($this->data['lastVisitedFrom']) && !empty($this->data['lastVisitedTo'])){
                    $this->setFromToDateConditions(
                        $this->data['lastVisitedFrom'],
                        $this->data['lastVisitedTo'],
                        'lastActivityAt',
                        $qb
                    );
                }

                if(!empty($this->data['ip'])) {
                    $qb->andWhere('u.ip = :ip')->setParameter('ip', $this->data['ip']);
                }

                //echo $qb->getDQL();
                //die;
            }
        }

        $this->setSearchFilter($qb, $settings['per_page'], $settings['page'], $is_search_orientation);

        if($this->export){
            //var_dump(123);die;
            return $qb->distinct()->getQuery()->getArrayResult();
        }

        if(isset($this->data['filter']) && $this->data['filter'] == 'popularity'){
            //die;
            $users = $qb->getQuery()->getResult();
            shuffle($users);
            return $users;
        }

        if(isset($settings['allResults']) and $settings['allResults']){
           // die;
        	$users = $qb->getQuery()->getResult();
        	return $users;
        }
        //var_dump(123);die;
        //echo  $settings['page'];
        //die;
        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
    }

    private function setSearchFilter($qb, $perPage = null, $page = null, $is_search_orientation = false)
    {
        if(null === $this->data || !isset($this->data['filter'])){
            $this->data['filter'] = '';
        }

        if(!$this->admin){

            $qb->andWhere('u.isActive = 1')
                ->andWhere('u.isNonLocked = 1')
                ->andWhere('u.isFrozen = 0')
            ;

            if($this->currentUser instanceof User && !$this->currentUser->isAdmin()){
                //$qb->andWhere('u.gender <> :gender')->setParameter('gender', $this->currentUser->getGender());
                if (!$is_search_orientation){
                    $qb->andWhere('u.id !=' . $this->currentUser->getId());
                    if($this->currentUser->getSexOrientation()->getId() == 1) {
                        $qb->andWhere('u.gender <> :gender')->setParameter('gender', $this->currentUser->getGender());
                        $qb->andWhere(
                            $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                        )->setParameter('sexOrientation', array(2,3));
                    }elseif ($this->currentUser->getSexOrientation()->getId() == 2){
                        $qb->andWhere('u.gender = :gender')->setParameter('gender', 1);
                        $qb->andWhere(
                            $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                        )->setParameter('sexOrientation', array(1));
                    }elseif ($this->currentUser->getSexOrientation()->getId() == 3){
                        $qb->andWhere('u.gender = :gender')->setParameter('gender', 2);
                        $qb->andWhere(
                            $qb->expr()->notIn('u.sexOrientation', ":sexOrientation")
                        )->setParameter('sexOrientation', array(1));
                    }else{
                        $qb->andWhere('u.sexOrientation <> 1 OR (u.sexOrientation = 1 AND u.gender <> :gender)')->setParameter('gender', $this->currentUser->getGender());
                    }
                }
            }

        }

        switch($this->data['filter'])
        {
            default:
            case 'lastActivity':

                $qb->orderBy('u.lastActivityAt', 'DESC');
                break;

            case 'distance':
                if($this->currentUser->getLatitude() != null and $this->currentUser->getLongitude() != null) {
                     if(!isset($this->data['distance']) or (int)$this->data['distance'] == 0){
                        $qb->andWhere('(u.latitude IS NOT NULL AND u.longitude IS NOT NULL)');
                        //$qb->AndWhere("get_distance(u.latitude,u.longitude," . $this->currentUser->getLatitude() . "," . $this->currentUser->getLongitude() . ") > 0");
                     }
//                         $qb->orderBy("((u.latitude-" . $this->currentUser->getLatitude() . ")*(u.latitude-" .
//                             $this->currentUser->getLatitude() . ")) + ((u.longitude -" . $this->currentUser->getLongitude() .
//                             ")*(u.longitude - " . $this->currentUser->getLongitude() . "))", "ASC");
                    $qb->addSelect("get_distance(u.latitude,u.longitude," . $this->currentUser->getLatitude() . "," . $this->currentUser->getLongitude() . ") as HIDDEN distance");
                    $qb->orderBy('distance');

                }else{
                    $qb->orderBy('u.lastActivityAt', 'DESC');
                }
                break;
                
            case 'new':

                $date = new \DateTime('30 days ago');
                $qb/*->andWhere('u.signUpDate >= :date')
                    ->setParameter('date', $date->format('Y-m-d h:i:s'))*/
                    ->orderBy('u.id', 'DESC')
                ;
                break;
                
            case 'photo':

                //$qb->leftJoin('u.photos', 'p', 'WITH',
                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                );
                $qb->expr()->count('ph.id');
                $qb->orderBy('ph.isValid', 'DESC');
                $qb->addOrderBy('u.lastActivityAt', 'DESC');
                break;

            case 'popularity':

                if ($page != null) {
                    $qb->setMaxResults($perPage)->setFirstResult($perPage * $page)->orderBy('u.views', 'DESC');
                } else {
                    $qb->setMaxResults($perPage)->orderBy('u.views', 'DESC');
                }
                break;


            /*
             * Admin Filters
             */

            case 'total':
                $qb->orderBy('u.id', 'DESC');
                break;

            case 'active_and_not_frozen':

                $qb->where('u.isActive = 1')
                    ->andWhere('u.isFrozen = 0')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'male':

                $qb->where('u.gender = 1')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'female':

                $qb->where('u.gender = 2')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'with_photos':

                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                )->orderBy('u.id', 'DESC');

                //$qb->addOrderBy('u.lastActivityAt', 'DESC');

                break;

            case 'frozen':

                $qb->where('u.isFrozen = 1')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'inactive':

                $qb->where('u.isActive = 0')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'flagged':

                $qb->where('u.isFlagged = 1')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'paying':

                $date = date("Y-m-d");

                $qb->where("u.startSubscription <= '" . $date ."'")
                    ->andWhere("u.endSubscription >= '" . $date . "'")
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'error_paying':
                $em = $this->getEntityManager();
                $payments = $em->getRepository('AppBundle:Payment')->createQueryBuilder('p')->where('p.error > 0')->getQuery()->getResult();//findBy(array('error' ));
                $ids = array();
                foreach ($payments as $payment){
                    if(!in_array($payment->getUser()->getId(),$ids)){
                        $ids[] = $payment->getUser()->getId();
                    }
                }
                if(count($ids) > 1) {
                    $qb->where("u.id IN(" . implode(",", $ids) . ")");
                }elseif (count($ids) == 1){
                    $qb->where("u.id = " . $ids[0]);
                }else{
                    $qb->where("u.id = 0");
                }
                break;

            case 'active_paying':
                $em = $this->getEntityManager();
                $payments = $em->getRepository('AppBundle:Payment')->createQueryBuilder('p')->where('p.isActive = 1')->getQuery()->getResult();
                $ids = array();
                foreach ($payments as $payment){
                    if(!in_array($payment->getUser()->getId(),$ids)){
                        $ids[] = $payment->getUser()->getId();
                    }
                }
                if(count($ids) > 1) {
                    $qb->where("u.id IN(" . implode(",", $ids) . ")");
                }elseif (count($ids) == 1){
                    $qb->where("u.id = " . $ids[0]);
                }else{
                    $qb->where("u.id = 0");
                }
                break;

            case 'today_paying':
                $em = $this->getEntityManager();
                $date = new \DateTime();
                $from = new \DateTime($date->format("Y-m-d") . " 00:00:00");
                $to = new \DateTime($date->format("Y-m-d") . " 23:59:59");

                $paymentHistories = $em->getRepository('AppBundle:PaymentHistory')->createQueryBuilder('ph')
                    ->where('ph.paymentDate BETWEEN :from AND :to')
                    ->setParameter('from', $from)
                    ->setParameter('to', $to)->getQuery()->getResult();
                $ids = array();
                foreach ($paymentHistories as $paymentHistory){
                    if(!in_array($paymentHistory->getPayment()->getUser()->getId(),$ids)){
                        $ids[] = $paymentHistory->getPayment()->getUser()->getId();
                    }
                }
                if(count($ids) > 1) {
                    $qb->where("u.id IN(" . implode(",", $ids) . ")");
                }elseif (count($ids) == 1){
                    $qb->where("u.id = " . $ids[0]);
                }else{
                    $qb->where("u.id = 0");
                }
                break;

        }


        if(isset($this->data['current_route']) && $this->data['current_route'] == 'users_public_list'){
            $qb->orderBy('u.id', 'DESC');
        }

    }

    public function getUsersForLike($currentUser, $firstUser = false, $limit = 300)
    {
        // var_dump(123); die;
        if(!$currentUser->hasValidPhotos()){

            return array('online' => array(), 'other' => array(), 'photos' => 0);
        }
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        $considered_as_online_minutes_number = $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber();

        $userId = $currentUser->getId();
        $genderId = $currentUser->getGender()->getId();
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($considered_as_online_minutes_number . ' minutes ago'));
        $userNotIn = '<> ?';
        $param2 = ($firstUser) ? $firstUser->getId() : $userId;

        //var_dump($currentUser->getSexOrientation()->getId());
        $add_sql = "";
        if($currentUser->getSexOrientation()->getId() == 1) {
            $add_sql .= " AND u.gender_id <>  " . $genderId;
            $add_sql .= " AND u.sex_orientation_id NOT IN(2, 3)";
        } elseif($currentUser->getSexOrientation()->getId() == 2) {
            $add_sql .= " AND u.gender_id = 1";
            $add_sql .= " AND u.sex_orientation_id NOT IN(1)";
        } elseif ($currentUser->getSexOrientation()->getId() == 3) {
            $add_sql .= " AND u.gender_id = 2"; //2
            $add_sql .= " AND u.sex_orientation_id NOT IN(1)";
        } else {
            $add_sql .= "AND u.sex_orientation_id <> 1 OR (u.sex_orientation_id = 1 AND u.gender_id <> " . $genderId . ")";
        }

        $sql = " SELECT
                    i.name as image,
                    u.id, u.username, u.birthday
                FROM  
                    user u
                JOIN 
                    photo i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 
                WHERE u.last_activity_at > ?
                AND u.id " . $userNotIn . " 
                 ".$add_sql. "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
              
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)		
                	
                ORDER BY rand() LIMIT " . $limit . "
                
            ";//    AND u.gender_id <> " . $genderId . "



        //

        $stmt = $conn->prepare($sql);
        $delayStr = $delay->format('Y-m-d H:i:s');
        $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
        if($firstUser){
            $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
        }else {
            $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        }
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->execute();

        $result = $stmt->fetchAll();

        if(count($result) < 200){
            //$top = 250 - count($result);
            $sql = "
                SELECT
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */. "
                    i.name as image,
                    		u.id, u.username, u.birthday
                FROM
                    user u

                JOIN
                    photo i
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1
                WHERE u.last_activity_at <= ?
                AND u.id " . $userNotIn . "
                ".$add_sql. "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)
                	".$add_sql. "
                "/* . "LIMIT " . $top */ . "
                ORDER BY RAND()
            ";

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
            if($firstUser){
                $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
            }else {
                $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            }
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->execute();

            $result2 = $stmt->fetchAll();
        }else{
            $result2 = false;
        }
        if($firstUser){
            $firstUserArr = array(
                'id' => $firstUser->getId(),
                'username' => $firstUser->getUsername(),
                'birthday' => $firstUser->getBirthday()->format('Y-m-d'),
                'image' => $firstUser->getMainPhoto()->getWebPath(),
                //'faceImage' => $firstUser->getMainPhoto()->getFaceWebPath(),
                //'age' => $firstUser->age(),
                'area' => $firstUser->getRegion()->getName(),
            );
            /*
            $sql = "SELECT * FROM like_me WHERE (from_id = ? and to_id = ?) or (to_id = ? and from_id = ?)";
            $stmt = $conn->prepare($sql);
            $firstUserId = $firstUser->getId();
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $firstUserId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $firstUserId, \PDO::PARAM_INT);
            $userLikeMe = $stmt->fetchAll();
            if(count($userLikeMe) > 0){
                $like = $userLikeMe[0];
                if($like['from_id'] == (int)$userId)
                    $firstUserArr['i_like'] = true;
                else
                    $firstUserArr['bingo'] = $like['is_bingo'];
            }
            */
            $firstUserId = $firstUser->getId();
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $userId, 'userTo' => $firstUserId));
            if(empty($likeMe)){
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $firstUserId, 'userTo' => $userId));
            }

            //var_dump(!is_object($likeMe) or !$likeMe->getIsBingo());
            if(!is_object($likeMe) or !$likeMe->getIsBingo()) {
                array_unshift($result, $firstUserArr);
            }
        }

        return array('online' => $result, 'other' => $result2, 'photos' => count($currentUser->getPhotos()));
    }

    public function getList($settings)
    {
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['request_data'];

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.isActive = 1')
            ->andWhere('u.isNonLocked = 1')
            ->andwhere('u.isFrozen = 0')
            ->join('u.' . $settings['inverse_list'], 'list', 'WITH',
                $qb->expr()->eq('list.' . $settings['type'], $this->currentUser)
            )
        ;

        $this->setAdminMode();
        $this->setSearchFilter($qb);
        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
    }

    private function setFromToDateConditions($dateFrom, $dateTo, $dateField, $qb)
    {
        $dateArr_1 = explode("/", $dateFrom);
        $dateArr_2 = explode("/", $dateTo);

        $date_1 = $dateArr_1[2] . '-' . $dateArr_1[1] . '-' . $dateArr_1[0] . ' 00:00:00';
        $date_2 = $dateArr_2[2] . '-' . $dateArr_2[1] . '-' . $dateArr_2[0] . ' 23:59:59';

        $qb->andWhere("u." . $dateField . " >= '" . $date_1 ."'")
            ->andWhere("u." . $dateField . " <= '" . $date_2 ."'")
        ;
        //echo $date_1 . '<br>';
        //echo $date_2 . '<br><br>';
    }


    public function setAdminMode(){
        $this->admin = true;
        return $this;
    }

    public function setExportMode(){
        $this->export = true;
        return $this;
    }

    public function getData(){
        return $this->data;
    }

    public function getAdminStat(){
        return $this->getEntityManager()->getConnection()->query("CALL get_admin_stat")->fetch();
    }

    public function saveBanReason($users, $reason)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->update()
            ->set('u.banReason', ':reason')
            ->where(
                $qb->expr()->in('u.id', ':users')
            )->setParameter('reason', $reason)
            ->setParameter('users', explode(',', $users))
        ;

        $qb->getQuery()->execute();
    }

    public function givePoint($toAll)
    {
        $qb = $this->createQueryBuilder('u');

        if($toAll == 1){
            $qb->update()
                ->set('u.points', 'u.points + 1')
                ->getQuery()
                ->execute()
            ;
        }
        else{
            $qb->update()
                ->set('u.points', 'u.points + 1')
                ->where('u.points = 0')
                ->getQuery()
                ->execute()
            ;
        }
    }

    public function onHomepage()
    {
        $qb = $this->createQueryBuilder('u');
        return $qb->where('u.isOnHomepage = 1')
            ->join('u.photos', 'p', 'WITH',
                $qb->expr()->andX(
                    $qb->expr()->eq('p.isMain', true),
                    $qb->expr()->eq('p.isValid', true)
                )
            )
            ->getQuery()
            ->getResult()
        ;
    }

    public function getSplashBingo($user)
    {
        $em = $this->getEntityManager();
        $res = false;
        //$conn = $em->getConnection();
        $bingos = $em->getRepository('AppBundle:LikeMe')->findBy(array('userFrom' => $user, 'isBingo' => 1, 'isShowSplashFrom' => 0));
        for($i = 0; $i < count($bingos); $i++) {
            if(!$bingos[$i]->getUserTo()->getMainPhoto()) {
                unset($bingos[$i]);
            }
        }
        if(count($bingos) == 0){
            $bingos = $em->getRepository('AppBundle:LikeMe')->findBy(array('userTo' => $user, 'isBingo' => 1, 'isShowSplashTo' => 0));

            for($i = 0; $i < count($bingos); $i++) {
                if(!$bingos[$i]->getUserFrom()->getMainPhoto()) {
                    unset($bingos[$i]);
                }
            }

        }

        // var_dump($bingos ? 1 : 0);
        if(count($bingos) > 0){
            $result = $bingos[0];


            if($result->getUserFrom()->getId() == $user->getId()){
                //var_dump($contactUser = $result->getMainPhoto());
                $contactUser = $result->getUserTo();
            }else{

                $contactUser = $result->getUserFrom();
            }
            //  var_dump($contactUser->getId());

            // var_dump($contactUser->getMainPhoto()->getFaceWebPath() ? 1 : 0);
            // var_dump($user->getMainPhoto() ? 1 : 0);

            if($contactUser->getMainPhoto() && $contactUser->getMainPhoto()->getFaceWebPath() && $user->getMainPhoto() && $user->getMainPhoto()->getFaceWebPath()) {

                $res = array(
                    'id' => $result->getId(),
                    'photo1' => $contactUser->getMainPhoto()->getFaceWebPath(),
                    'photo2' => $user->getMainPhoto()->getFaceWebPath(),
                    'username' => $contactUser->getUsername(),
                    'contact_id' => $contactUser->getId(),
                );
            }
        }

        return $res;
    }


    public function getDialogs($currentUser)
    {
        $dialogs = array();
        $config = Config::getInstance();
        $userId = $currentUser->getId();
        $conn = $this->getEntityManager()->getConnection();


            $sql = "SELECT m.date, m.message, m.fromUser, m.isRead, IF(lm.user2 = ?,lm.user1,lm.user2) as id,
                (SELECT COUNT(messageId) FROM messenger WHERE toUser = ? AND isRead = 0 AND fromUser = IF(lm.user2 = ?,lm.user1,lm.user2)) as newMessagesNumber
            FROM 
                messengerLastMessages lm
            JOIN
                messenger m
            ON
                m.messageId = (CASE WHEN lm.user2 = ? and lm.messageId2 > 0 THEN lm.messageId2 ELSE lm.messageId END)  
            WHERE
                ((lm.user2 = ? AND lm.user2_del = 0 ) OR (lm.user1 = ? AND lm.user1_del = 0)) AND lm.user1 <> lm.user2
            ORDER BY (CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC, m.messageId DESC ";/*(CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC*/
            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
            $stmt->execute();
            $result = $stmt->fetchAll();

            $sql2 = "SELECT u.gender_id, u.username, p.name as photoName, isPaying(u.start_subscription, u.end_subscription, NOW()) as contactIsPaying
                    FROM
                user u
                LEFT JOIN  
                photo p
            ON
                p.user_id = u.id AND p.is_main = 1 AND p.is_valid = 1
            WHERE
                u.id = ? AND u.is_frozen = 0 AND u.is_non_locked = 1 and u.is_active = 1 AND u.is_non_locked = 1";

            $siteIsPay = $this->siteIsPaying();
            $isPaying = ($siteIsPay OR $currentUser->getId() == 111 OR $currentUser->getId() == 124 OR $currentUser->getId() == 3348) ? $currentUser->isPaying() : true;
            //לא ניתן לצפות בהודעה. לרכישת מנוי לחצו כאן או השתמשו בנקודה לקריאת הודעות.
            $hasPoints = ((int)$currentUser->getPoints() > 0);
            foreach($result as $row){

                $userWith = $row['id'];
                $stmt = $conn->prepare($sql2);
                $stmt->bindParam(1, $userWith, \PDO::PARAM_INT);
                $stmt->execute();
                $row2 = $stmt->fetch();
                if($row2) {
                    $row['gender_id'] = $row2['gender_id'];
                    $row['username'] = $row2['username'];
                    $row['photoName'] = $row2['photoName'];
                    $row['contactIsPaying'] = $row2['contactIsPaying'];
                    $contactIsPaying = ($siteIsPay OR $userWith == 111 OR $userWith == 124 OR $userWith == 3348) ? $row2['contactIsPaying'] : true;
                    $row['message'] = ($isPaying || $contactIsPaying || $row['fromUser'] == $currentUser->getId() || $row['isRead'] == 1)
                        ? strip_tags(urldecode(nl2br($row['message'])))
                        : ($config['payment']['linkText'] . (($hasPoints) ? (' או ' . $config['points']['linkText']) : ''));

                    $row['date'] = date("d-m-Y H:i", strtotime($row['date']));
                    if (empty($row['photoName'])) {
                        $row['noPhoto'] = '/images/no_photo_thumb_' . $row['gender_id'] . '.jpg';
                    }
                    //$row['chatPaying'] = ($isPaying || $contactIsPaying);

                    $dialogs[] = $row;
                }
            }
        return $dialogs;
    }

    public function oldGetDialogs($currentUser)
    {
        $dialogs = array();
        $config = Config::getInstance();
        $userId = $currentUser->getId();
        $conn = $this->getEntityManager()->getConnection();


        $sql = "SELECT m.date, m.message, m.fromUser, m.isRead, IF(lm.user2 = ?,lm.user1,lm.user2) as id,
                (SELECT COUNT(messageId) FROM messenger WHERE toUser = ? AND isRead = 0 AND fromUser = IF(lm.user2 = ?,lm.user1,lm.user2)) as newMessagesNumber
            FROM 
                messengerLastMessages lm
            JOIN
                messenger m
            ON
                m.messageId = (CASE WHEN lm.user2 = ? and lm.messageId2 > 0 THEN lm.messageId2 ELSE lm.messageId END)  
            WHERE
                ((lm.user2 = ? AND lm.user2_del = 0 ) OR (lm.user1 = ? AND lm.user1_del = 0)) AND lm.user1 <> lm.user2
            ORDER BY (CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC, m.messageId DESC ";/*(CASE WHEN newMessagesNumber = 0 THEN 2 ELSE 1 END) ASC*/
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(5, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(6, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetchAll();

        $sql2 = "SELECT u.gender_id, u.username, p.name as photoName, isPaying(u.start_subscription, u.end_subscription, NOW()) as contactIsPaying
                    FROM
                user u
                LEFT JOIN  
                photo p
            ON
                p.user_id = u.id AND p.is_main = 1 AND p.is_valid = 1
            WHERE
                u.id = ? AND u.is_frozen = 0 AND u.is_non_locked = 1 and u.is_active = 1 AND u.is_non_locked = 1";

       // $siteIsPay = $this->siteIsPaying();
       // $isPaying = ($siteIsPay OR $currentUser->getId() == 111 OR $currentUser->getId() == 124 OR $currentUser->getId() == 3348) ? $currentUser->isPaying() : true;
        //לא ניתן לצפות בהודעה. לרכישת מנוי לחצו כאן או השתמשו בנקודה לקריאת הודעות.
       // $hasPoints = ((int)$currentUser->getPoints() > 0);
        foreach($result as $row){

            $userWith = $row['id'];
            $stmt = $conn->prepare($sql2);
            $stmt->bindParam(1, $userWith, \PDO::PARAM_INT);
            $stmt->execute();
            $row2 = $stmt->fetch();
            if($row2) {
                $row['gender_id'] = $row2['gender_id'];
                $row['username'] = $row2['username'];
                $row['photoName'] = $row2['photoName'];
//                $row['contactIsPaying'] = true;
               // $contactIsPaying = ($siteIsPay OR $userWith == 111 OR $userWith == 124 OR $userWith == 3348) ? $row2['contactIsPaying'] : true;
                $row['message'] = /*($isPaying || $contactIsPaying || $row['fromUser'] == $currentUser->getId() || $row['isRead'] == 1)
                    ?*/ strip_tags(urldecode(nl2br($row['message'])));
                   /* : ($config['payment']['linkText'] . (($hasPoints) ? (' או ' . $config['points']['linkText']) : ''));*/

                $row['date'] = date("d-m-Y H:i", strtotime($row['date']));
                if (empty($row['photoName'])) {
                    $row['noPhoto'] = '/images/no_photo_thumb_' . $row['gender_id'] . '.jpg';
                }
//                $row['chatPaying'] = true;

                $dialogs[] = $row;
            }
        }
        return $dialogs;
    }

    public function siteIsPaying(){
        $em = $this->getEntityManager();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        return $settings->getIsCharge();
    }


    public function getDistance($user1,$user2)
    {
        $distance = 0;
        if($user1->getLatitude() != null and $user1->getLongitude() != null and $user2->getLatitude() != null and $user2->getLongitude() != null) {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "SELECT get_distance(" . $user1->getLatitude() . "," . $user1->getLongitude() . "," . $user2->getLatitude() . "," . $user2->getLongitude() . ") as distance";
            $stmt = $conn->prepare($sql);
            $stmt->execute();
            $distance = $stmt->fetchAll();
            $distance = (number_format((float)$distance[0]['distance'], 2) < 1) ? number_format((float)$distance[0]['distance'], 2) : number_format($distance[0]['distance'], 0, '.', '');
        }
        return $distance;
    }


    public function deleteDialog($user, $contact)
    {

          $conn = $this->getEntityManager()->getConnection();


        $sql = "SELECT * FROM messengerLastMessages AS lm WHERE (user1 = $user AND user2 = $contact) OR (user1 = $contact AND user2 = $user)";
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        $res = $stmt->fetchAll();

        if ($res) {

            try {
                $howDelete = $res[0]['user1'] == $user ? 'user1_del' : 'user2_del';
                $id = $res[0]['id'];
                $sql = "UPDATE messengerLastMessages SET " . $howDelete . " = 1 WHERE id=?";
                $stmt = $conn->prepare($sql);
                $stmt->execute([$id]);

                $sql = "UPDATE messenger SET msgFromDel = 1 WHERE (fromUser = $user AND toUser = $contact)";
                $stmt = $conn->prepare($sql);
                $stmt->execute();

                $sql = "UPDATE messenger SET msgToDel = 1 WHERE (fromUser = $contact AND toUser = $user)";
                $stmt = $conn->prepare($sql);
                $stmt->execute();
                return array(
                    'deleted' => true
                );
            } catch(Exception $e) {
                return array(
                    'deleted' => false
                );
            }
        }

    }
//return array(
//'deleted' => true
//);

    public function getUsersForLike2($currentUser, $firstUser = false, $limit = 300)
    {
  //       var_dump(123); die;
        if(!$currentUser->hasValidPhotos()){

            return array('online' => array(), 'other' => array(), 'photos' => 0);
        }
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        $considered_as_online_minutes_number = $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber();

        $userId = $currentUser->getId();
        $genderId = $currentUser->getGender()->getId();
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($considered_as_online_minutes_number . ' minutes ago'));
        $userNotIn = '<> ?';
        $param2 = ($firstUser) ? $firstUser->getId() : $userId;

        $sql = "
                SELECT
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */. " 
                    i.name as image,
                    u.id, u.username, u.birthday
                FROM  
                    user u
           
                JOIN 
                    photo i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 
                WHERE u.last_activity_at > ?
                AND u.id " . $userNotIn . "
                AND u.gender_id <> " . $genderId . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)			 
                ORDER BY RAND() LIMIT " . $limit . "
            ";

        $stmt = $conn->prepare($sql);
        $delayStr = $delay->format('Y-m-d H:i:s');
        $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
        if($firstUser){
            $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
        }else {
            $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        }
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetchAll();

        if(count($result) < 200){
            //$top = 250 - count($result);
            $sql = "
                SELECT 
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */. "
                    i.name as image,
                    		u.id, u.username, u.birthday
                FROM  
                    user u		
            
                JOIN
                    photo i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1		
                WHERE u.last_activity_at <= ?
                AND u.id " . $userNotIn . " 	
                AND u.gender_id <> " . $genderId . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)			
                "/* . "LIMIT " . $top */ . "
                ORDER BY RAND()
            ";

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
            if($firstUser){
                $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
            }else {
                $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            }
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->execute();
            $result2 = $stmt->fetchAll();
        }else{
            $result2 = false;
        }

        if($firstUser){
            $firstUserArr = array(
                'id' => $firstUser->getId(),
                'username' => $firstUser->getUsername(),
                'birthday' => $firstUser->getBirthday()->format('Y-m-d'),
                'image' => $firstUser->getMainPhoto()->getWebPath(),
                //'faceImage' => $firstUser->getMainPhoto()->getFaceWebPath(),
                //'age' => $firstUser->age(),
                'area' => $firstUser->getRegion()->getName(),
            );
            /*
            $sql = "SELECT * FROM like_me WHERE (from_id = ? and to_id = ?) or (to_id = ? and from_id = ?)";
            $stmt = $conn->prepare($sql);
            $firstUserId = $firstUser->getId();
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $firstUserId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $firstUserId, \PDO::PARAM_INT);
            $userLikeMe = $stmt->fetchAll();
            if(count($userLikeMe) > 0){
                $like = $userLikeMe[0];
                if($like['from_id'] == (int)$userId)
                    $firstUserArr['i_like'] = true;
                else
                    $firstUserArr['bingo'] = $like['is_bingo'];
            }
            */
            $firstUserId = $firstUser->getId();
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $userId, 'userTo' => $firstUserId));
            if(empty($likeMe)){
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $firstUserId, 'userTo' => $userId));
            }

            //var_dump(!is_object($likeMe) or !$likeMe->getIsBingo());
            if(!is_object($likeMe) or !$likeMe->getIsBingo()) {
                array_unshift($result, $firstUserArr);
            }
        }

        return array('online' => $result, 'other' => $result2, 'photos' => 4 /*count($currentUser->getPhotos())*/);
    }

}
